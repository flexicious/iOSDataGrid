#import "FLXSVersion.h"
@class FLXSClassFactory;
@protocol FLXSIPDFPrinter;

/**
	 * A interface so we can write code that targets
	 * both anything that can be printed using the print mechanism
	 */
@protocol FLXSIPrintable
/**
		 * This should already come from the UIComponent,
		 */
-(NSObject*)parentDocument;
/**
		 * This is used by the toolbar. For custom print components, just delcare a property
		 * with this name, it will not be used.
		 */
-(BOOL)enablePrint;
/**
		 * @private
		 */
-(void)enablePrint:(BOOL)enabled;
/**
		 * Gets the class responsible for handling the PrintUI for this IPrintable. Should be a IPrintComponent.
		 * For custom print components, it should be a ICustomPrintComponent
		 */

-(FLXSClassFactory*)createPrintComponentFactory;
/**
     * A class that takes the PDF Pages as they are generated. This functionality
     * was introduced in 2.9 to provide a responsive UI during the generation of the PDF.
     * Previously, the print controller created image snapshots in memory, and handed them all to the pdf engine, which processed
     * them individually by adding them to the display tree in one go.
     * Instead, now, the step of the snapshot itself adds the image to the pdf doc and this whole thing
     * runs inside a timer so the UI has an opportunity to update itself.
     *
     * First, you specify a class that implements IPDFPrinter as the pdfPrinter property.
     * The AlivePdfPrinter is a sample implementation of IPDFPrinter. This class should expose the
     * methods defined in the IPDFPrinter which are used as such:
     * The beginDocument method is called when the Print controller is ready to send out the pages.
     * For each page generated by the Print Controller, the addPage method is called.
     * Once all pages are added to the doc, the endDocument method is called.
     */
-(NSObject <FLXSIPDFPrinter>*)pdfPrinter;
/**
     * @private
     */
-(void)pdfPrinter:(NSObject <FLXSIPDFPrinter>*)val;
@end

